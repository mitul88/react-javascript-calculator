{"version":3,"sources":["reportWebVitals.js","index.js","App.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","App","document","getElementById","nums","ops","ids","7","8","9","4","5","6","1","2","3","0","state","lastPressed","undefined","calc","operation","handleClick","e","innerText","target","setState","evaluated","eval","splitted","split","last","slice","includes","lastNumberIdx","reverse","findIndex","char","length","console","log","this","className","id","onClick","map","num","op","React","Component"],"mappings":"gPAYeA,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACC,EAAA,EAAD,MAEFC,SAASC,eAAe,SAM1Bd,K,m2CCbMe,KAAO,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAC1BC,IAAM,CAAC,IAAK,IAAK,IAAK,KACtBC,IAAM,CACVC,EAAI,QACJC,EAAI,QACJC,EAAI,OACJC,EAAI,OACJC,EAAI,OACJC,EAAI,MACJC,EAAI,MACJC,EAAI,MACJC,EAAI,QACJC,EAAI,OACJ,IAAK,SACL,IAAM,WACN,IAAM,WACN,IAAM,OAGFf,I,6yBAEJgB,MAAQ,CACNC,iBAAcC,EACdC,KAAO,IACPC,eAAYF,G,MAGdG,YAAc,SAACC,GAAO,IAAD,YACW,MAAKN,MAA3BG,KADW,YACXA,KAAMF,YADK,YACLA,YACNM,UAAcD,EAAEE,OAAhBD,UAER,OAAOA,WACL,IAAI,KACF,MAAKE,SAAS,CACZN,KAAO,MAET,MAEF,IAAK,IACH,IAAMO,UAAYC,KAAKR,MAEvB,MAAKM,SAAS,CACZN,KAAMO,YAER,MAEF,IAAK,IACH,IAAME,SAAWT,KAAKU,MAAM,cACtBC,KAAOF,SAASG,OAAO,GAAG,GAE5BD,KAAKE,SAAS,MAChB,MAAKP,SAAS,CACVN,KAAMA,KAAK,MAGjB,MAEF,QACE,IAAIG,QAAIJ,EAER,GAAGd,IAAI4B,SAAST,WACd,GAAGnB,IAAI4B,SAASf,cAA8B,MAAdM,UAAmB,CACjD,IAAMU,cAAgBd,KAAKU,MAAM,IAAIK,UAAUC,WAAU,SAAAC,GAAI,MAAa,MAATA,GAAgBjC,KAAK6B,UAAUI,MAChGd,GAAIH,KAAKY,MAAM,EAAGZ,KAAKkB,OAASJ,eAA5B,WAAiDV,UAAjD,KACJe,QAAQC,IAAIpB,WAEZG,GAAC,WAAOH,KAAP,YAAeI,UAAf,UAIHD,GAAc,MAATH,KAAgBI,UAAaJ,KAAOI,UAG3C,MAAKE,SAAS,CACZN,KAAMG,GACNL,YAAcM,YAIpB,MAAKE,SAAS,CACZR,YAAcM,a,uOAIR,IAAD,OACCJ,EAASqB,KAAKxB,MAAdG,KACR,OACE,mEAAKsB,UAAU,aAAf,UAIE,kEAAKC,GAAG,UAAUD,UAAU,UAA5B,SACGtB,IAEH,mEAAKsB,UAAU,iBAAf,UACE,qEACEC,GAAG,QACHD,UAAU,sBACVE,QAASH,KAAKnB,YAHhB,gBAOClB,KAAKyC,KAAI,SAAAC,GAAG,OACX,qEACEH,GAAIrC,IAAIwC,GACRJ,UAAS,oBAAuB,IAARI,GAAa,QAA5B,KAETF,QAAS,EAAKtB,YAJhB,SAKKwB,GAFEA,MAMT,qEACEH,GAAG,UACHD,UAAU,aACVE,QAASH,KAAKnB,YAHhB,kBAOA,mEAAKoB,UAAU,gBAAf,UACGrC,IAAIwC,KAAI,SAAAE,GAAE,OACT,qEACEJ,GAAIrC,IAAIyC,GACRL,UAAU,SAEVE,QAAS,EAAKtB,YAJhB,SAKKyB,GAFEA,MAMX,qEACEJ,GAAG,SACHD,UAAU,SACVE,QAASH,KAAKnB,YAHhB,yB,KA/GQ0B,6CAAMC,WA2HThD,4B","file":"static/js/main.ca049dc5.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import React from \"react\";\nimport './App.css';\n\nconst nums = [7,8,9,4,5,6,1,2,3,0];\nconst ops = [\"/\", \"*\", \"-\", \"+\"];\nconst ids = {\n  7 : 'seven',\n  8 : 'eight',\n  9 : 'nine',\n  4 : 'four',\n  5 : 'five',\n  6 : 'six',\n  1 : 'one',\n  2 : 'two',\n  3 : 'three',\n  0 : 'zero',\n  \"/\" :'divide', \n  \"*\" : \"multiply\", \n  \"-\" : \"subtract\",  \n  \"+\" : \"add\"\n}\n\nclass App extends React.Component {\n\n  state = {\n    lastPressed : undefined,\n    calc : '0',\n    operation : undefined\n  }\n\n  handleClick = (e) => {\n    const { calc, lastPressed } = this.state;\n    const { innerText } = e.target;\n    \n    switch(innerText) {\n      case'AC': {\n        this.setState({\n          calc : '0',\n        })\n        break;\n      }\n      case '=' : {\n        const evaluated = eval(calc);\n\n        this.setState({\n          calc: evaluated\n        })\n        break;\n      }\n      case '.' : {\n        const splitted = calc.split(/[\\+\\-\\*\\/]/);\n        const last = splitted.slice(-1)[0];\n\n        if(!last.includes('.')) {\n          this.setState({\n              calc: calc+'.'\n          })\n        }\n        break;\n      }\n      default : {       \n        let e = undefined;\n        // check for other operators\n        if(ops.includes(innerText)) {\n          if(ops.includes(lastPressed) && innerText !== '-') {\n            const lastNumberIdx = calc.split('').reverse().findIndex(char => char !== ' ' && nums.includes(+char));\n            e = calc.slice(0, calc.length - lastNumberIdx) + ` ${innerText} `;\n            console.log(calc)\n          } else {\n            e = ` ${calc} ${innerText} `\n          }\n        }\n         else {\n          e = (calc === '0') ? innerText : (calc + innerText); \n        }\n\n        this.setState({\n          calc: e,\n          lastPressed : innerText\n        })\n      }\n    }  \n    this.setState({\n      lastPressed : innerText\n    })\n  }\n\n  render() {\n    const { calc } = this.state;\n    return (\n      <div className=\"calculator\">\n\n        {/* <p style={{position: 'absolute', top: 0}}>{JSON.stringify(this.state)}</p> */}\n\n        <div id=\"display\" className=\"display\">\n          {calc}\n        </div>\n        <div className=\"nums-container\">\n          <button \n            id=\"clear\" \n            className=\"big-h light-grey ac\" \n            onClick={this.handleClick}>\n              AC\n          </button>\n\n          {nums.map(num=> (\n            <button\n              id={ids[num]} \n              className={`dark-grey ${num === 0 && 'big-h'} `} \n              key={num}  \n              onClick={this.handleClick}>\n                {num}\n            </button>\n          ))}\n          \n          <button \n            id=\"decimal\" \n            className=\"light-grey\" \n            onClick={this.handleClick}>\n              .\n          </button>\n        </div>\n          <div className=\"ops-container\">\n            {ops.map(op =>(\n              <button \n                id={ids[op]}\n                className=\"orange\" \n                key={op}\n                onClick={this.handleClick}>\n                  {op} \n              </button>\n            ))}\n\n          <button \n            id=\"equals\" \n            className=\"orange\" \n            onClick={this.handleClick}>\n              =\n          </button>\n          </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"],"sourceRoot":""}